{"ast":null,"code":"import _toConsumableArray from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/src/components/assigning_developer/AssigningDevelopers.js\";\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport \"react-table/react-table.css\";\nimport Axios from 'axios';\nvar CheckboxTable = new checkboxHOC(ReactTable);\n\nvar AssigningDeveloper =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AssigningDeveloper, _React$Component);\n\n  function AssigningDeveloper(props) {\n    var _this;\n\n    _classCallCheck(this, AssigningDeveloper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AssigningDeveloper).call(this, props));\n\n    _this.toggleSelection = function (key, shift, row) {\n      /*\n        Implementation of how to manage the selection state is up to the developer.\n        This implementation uses an array stored in the component state.\n        Other implementations could use object keys, a Javascript Set, or Redux... etc.\n      */\n      // start off with the existing state\n      var selection = _toConsumableArray(_this.state.selection);\n\n      var keyIndex = selection.indexOf(key); // check to see if the key exists\n\n      if (keyIndex >= 0) {\n        // it does exist so we will remove it using destructing\n        selection = [].concat(_toConsumableArray(selection.slice(0, keyIndex)), _toConsumableArray(selection.slice(keyIndex + 1)));\n      } else {\n        // it does not exist so add it\n        selection.push(key);\n      } // update the state\n\n\n      _this.setState({\n        selection: selection\n      });\n    };\n\n    _this.toggleAll = function () {\n      var selectAll = _this.state.selectAll ? false : true;\n      var selection = [];\n\n      if (selectAll) {\n        // we need to get at the internals of ReactTable\n        var wrappedInstance = _this.checkboxTable.getWrappedInstance(); // the 'sortedData' property contains the currently accessible records based on the filter and sort\n\n\n        var currentRecords = wrappedInstance.getResolvedState().sortedData; // we just push all the IDs onto the selection array\n\n        currentRecords.forEach(function (item) {\n          selection.push(item._original._id);\n        });\n      }\n\n      _this.setState({\n        selectAll: selectAll,\n        selection: selection\n      });\n    };\n\n    _this.isSelected = function (key) {\n      /*\n        Instead of passing our external selection state we provide an 'isSelected'\n        callback and detect the selection state ourselves. This allows any implementation\n        for selection (either an array, object keys, or even a Javascript Set object).\n      */\n      return _this.state.selection.includes(key);\n    };\n\n    _this.logSelection = function () {\n      console.log(\"selection:\", _this.state.selection);\n    };\n\n    _this.state = {\n      data: [],\n      selection: [],\n      selectAll: false\n    };\n    _this.fetchData = _this.fetchData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AssigningDeveloper, [{\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this2 = this;\n\n      Axios.get('http://localhost:3002/user', {\n        withCredentials: true\n      }).then(function (res) {\n        if (res.status === 200) {\n          Axios.get('http://localhost:3002/get_all_developers', {\n            headers: {\n              Authorization: \"Bearer \".concat(res.data)\n            }\n          }).then(function (res) {\n            _this2.setState({\n              data: res.data\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var toggleSelection = this.toggleSelection,\n          toggleAll = this.toggleAll,\n          isSelected = this.isSelected,\n          logSelection = this.logSelection;\n      var _this$state = this.state,\n          data = _this$state.data,\n          selectAll = _this$state.selectAll;\n      var checkboxProps = {\n        selectAll: selectAll,\n        isSelected: isSelected,\n        toggleSelection: toggleSelection,\n        toggleAll: toggleAll,\n        selectType: \"checkbox\",\n        getTrProps: function getTrProps(s, r) {\n          // someone asked for an example of a background color change\n          // here it is...\n          var selected = _this3.isSelected(r.original._id);\n\n          return {\n            style: {\n              backgroundColor: selected ? \"lightgreen\" : \"inherit\" // color: selected ? 'white' : 'inherit',\n\n            }\n          };\n        }\n      };\n      return React.createElement(\"div\", {\n        style: {\n          width: \"80%\",\n          margin: \"5em 15%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.props.match.params.id), React.createElement(CheckboxTable, Object.assign({\n        style: {\n          textAlign: \"center\"\n        },\n        columns: [{\n          Header: \"Name\",\n          accessor: \"name\",\n          width: 130\n        }, {\n          Header: \"ContactNo.\",\n          accessor: \"contactNo\",\n          width: 100\n        }, {\n          Header: 'Skills',\n          accessor: \"skills\"\n        }],\n        data: data,\n        onFetchData: this.fetchData\n      }, checkboxProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return AssigningDeveloper;\n}(React.Component);\n\nexport default AssigningDeveloper;","map":{"version":3,"sources":["/home/abhinav/Intern_work/workupdatesite/websiteforzias/frontend/ziasupdate/src/components/assigning_developer/AssigningDevelopers.js"],"names":["React","ReactTable","checkboxHOC","Axios","CheckboxTable","AssigningDeveloper","props","toggleSelection","key","shift","row","selection","state","keyIndex","indexOf","slice","push","setState","toggleAll","selectAll","wrappedInstance","checkboxTable","getWrappedInstance","currentRecords","getResolvedState","sortedData","forEach","item","_original","_id","isSelected","includes","logSelection","console","log","data","fetchData","bind","get","withCredentials","then","res","status","headers","Authorization","checkboxProps","selectType","getTrProps","s","r","selected","original","style","backgroundColor","width","margin","match","params","id","textAlign","Header","accessor","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactTable from 'react-table';\nimport checkboxHOC from \"react-table/lib/hoc/selectTable\";\nimport \"react-table/react-table.css\";\nimport Axios from 'axios';\n\nconst CheckboxTable=new checkboxHOC(ReactTable);\n\nclass AssigningDeveloper extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n          data:[],\n          selection:[],\n          selectAll:false\n        };\n        this.fetchData=this.fetchData.bind(this);\n    }\n    fetchData(){\n        Axios.get('http://localhost:3002/user',{withCredentials:true}).then(res=>{\n            if(res.status===200){\n                Axios.get('http://localhost:3002/get_all_developers',{headers:{Authorization: `Bearer ${res.data}`}})\n                .then(res=>{\n                    this.setState({data:res.data});\n                })\n            }\n        })\n    }\n\n\n    toggleSelection = (key, shift, row) => {\n      /*\n        Implementation of how to manage the selection state is up to the developer.\n        This implementation uses an array stored in the component state.\n        Other implementations could use object keys, a Javascript Set, or Redux... etc.\n      */\n      // start off with the existing state\n      let selection = [...this.state.selection];\n      const keyIndex = selection.indexOf(key);\n      // check to see if the key exists\n      if (keyIndex >= 0) {\n        // it does exist so we will remove it using destructing\n        selection = [\n          ...selection.slice(0, keyIndex),\n          ...selection.slice(keyIndex + 1)\n        ];\n      } else {\n        // it does not exist so add it\n        selection.push(key);\n      }\n      // update the state\n      this.setState({ selection });\n    };\n\n    toggleAll = () => {\n    \n      const selectAll = this.state.selectAll ? false : true;\n      const selection = [];\n      if (selectAll) {\n        // we need to get at the internals of ReactTable\n        const wrappedInstance = this.checkboxTable.getWrappedInstance();\n        // the 'sortedData' property contains the currently accessible records based on the filter and sort\n        const currentRecords = wrappedInstance.getResolvedState().sortedData;\n        // we just push all the IDs onto the selection array\n        currentRecords.forEach(item => {\n          selection.push(item._original._id);\n        });\n      }\n      this.setState({ selectAll, selection });\n    };\n  \n    isSelected = key => {\n      /*\n        Instead of passing our external selection state we provide an 'isSelected'\n        callback and detect the selection state ourselves. This allows any implementation\n        for selection (either an array, object keys, or even a Javascript Set object).\n      */\n      return this.state.selection.includes(key);\n    };\n  \n    logSelection = () => {\n      console.log(\"selection:\", this.state.selection);\n    };\n   \n  \n    render() {\n      const { toggleSelection, toggleAll, isSelected, logSelection } = this;\n      const { data , selectAll } = this.state;\n\n\n      const checkboxProps = {\n        selectAll,\n        isSelected,\n        toggleSelection,\n        toggleAll,\n        selectType: \"checkbox\",\n        getTrProps: (s, r) => {\n          // someone asked for an example of a background color change\n          // here it is...\n          const selected = this.isSelected(r.original._id);\n          return {\n            style: {\n              backgroundColor: selected ? \"lightgreen\" : \"inherit\"\n              // color: selected ? 'white' : 'inherit',\n            }\n          };\n        }\n      };\n\n\n        return (\n          <div style={{width:\"80%\",margin:\"5em 15%\"}}>\n          <h1>{this.props.match.params.id}</h1>\n            <CheckboxTable style={{textAlign:\"center\"}}\n                \n              columns={[\n                {\n                  Header: \"Name\",\n                  accessor:\"name\",\n                  width:130\n                },\n                {\n                  Header: \"ContactNo.\",\n                  accessor:\"contactNo\",\n                  width:100\n                },\n                {\n                  Header: 'Skills',\n                  accessor:\"skills\"\n                }\n              ]}\n              data={data}\n              onFetchData={this.fetchData}\n              {...checkboxProps}\n            />\n            <br />\n          </div>\n        );\n      }\n}\nexport default AssigningDeveloper;"]},"metadata":{},"sourceType":"module"}